{ "_id" : { "$oid" : "5510b3c98935b3bcb0cdf433" }, "name" : "Pig Latin", "shortDescription" : "Translate English phrases into Pig Latin", "longDescription" : "Write a program that translates English to Pig Latin. Pig Latin has a few simple rules- Rule 1: If a word begins with a vowel sound, add \"ay\" to the end of the word. Rule 2: If a word begins with a consonant sound, move it to the end of the word, and then add an \"ay\" sound to the end of the word. There are a few more rules for edge cases; you can see http://en.wikipedia.org/wiki/Pig_latin for details.", "editorPrompt" : "function translateToPigLatin(englishText) {\n\n}", "testCode" : "describe('pigLatin', function () {\nit('translates a word beginning with a', function () {\nexpect(translateToPigLatin('apple')).to.equal('appleay');\n});\nit('translates a word beginning with e', function () {  \nexpect(translateToPigLatin('ear')).to.equal('earay');\n});\nit('translates a word beginning with p', function () {\nexpect(translateToPigLatin('pig')).to.equal('igpay');\n});\nit('translates a word beginning with k', function () {\nexpect(translateToPigLatin('koala')).to.equal('oalakay');\n});\nit('translates a word beginning with ch', function () {\nexpect(translateToPigLatin('chair')).to.equal('airchay');\n});\nit('translates a word beginning with th', function () {  expect(translateToPigLatin('therapy')).to.equal('erapythay');\n});\nit('translates a word beginning with thr', function () {  expect(translateToPigLatin('thrush')).to.equal('ushthray');\n});\nit('translates a word beginning with sch', function () {\nexpect(translateToPigLatin('school')).to.equal('oolschay');\n});\n});\n", "difficulty" : "Medium", "category" : [ "functions", "regex" ], "__v" : 0, "time" : { "$date" : "2015-03-31T09:50:49.994-0400" } }
{ "_id" : { "$oid" : "5510b3c98935b3bcb0cdf434" }, "name" : "Add numbers", "shortDescription" : "Write a function that adds two numbers", "longDescription" : "Your add function should return the sum of the numbers that it takes in as input arguments", "editorPrompt" : "function add(one, two) {\n\n}", "testCode" : "describe('add', function() {\n    it(\"add(2,3) = 5\", function() { \n        var result = add(2, 3); \n        expect(result).to.equal(5); }); \n        it(\"add(3,3) = 6\", function() { \n            var result = add(3, 3); \n            expect(result).to.equal(6); \n            \n        }); \n});", "difficulty" : "Easy", "category" : [ "simpleFunctions" ], "__v" : 0, "time" : { "$date" : "2015-03-31T00:44:34.619-0400" } }
{ "_id" : { "$oid" : "5517f4cddb2a15b8a462ea52" }, "name" : "Sum Pairs", "shortDescription" : "Write a method that takes two parameters (array & target value)  and returns an array of the pairs (each being an array) that sum the target value.", "longDescription" : "Write a method that takes two parameters (array & target value) and returns an array of the pairs that sum the target value.\n\nFor example,\nsumPairs([1, 2, 3, 4, 5], 7) returns [[2, 3], [4, 5]]\nsumPairs([ 1, 3, 5], 10) returns [ ]\nsumPairs([0,0], 0) returns [[0,0]]", "difficulty" : "Medium", "testCode" : "describe(\"Sum Pairs\", function() {\n  it(\"returns an empty array\", function() {\n    return expect(sumPairs([0, 1, 3, 5, 7, 10], 9)).to.eql([]);\n  });\n  it(\"returns an array with the passing pairs\", function() {\n    return expect(sumPairs([7, 8, 3, 9, 1, -6, -8, 4], 11)).to.eql([[7, 4], [8, 3]]);\n  });\n  return it(\"considers that two zeros are required, if zero is the target value\", function() {\n    expect(sumPairs([6, -6, 8, -8, 9, -10, 0, 1], 0)).to.eql([[6, -6], [8, -8]]);\n    return expect(sumPairs([6, -6, 8, -8, 9, -10, 0, 0, 1], 0)).to.eql([[6, -6], [8, -8], [0, 0]]);\n  });\n});", "editorPrompt" : "function sumPairs(arr,target) {\n    //return an array of the pairs in arr that add to the target value\n    //solution should return an array of subarrays of length 2\n}", "category" : [ "Arrays", "Math" ], "__v" : 0 }
{ "_id" : { "$oid" : "551805f418aa4999b61fbb92" }, "name" : "Digit Combinations", "shortDescription" : "Write a function that takes a number returns an array of all the numbers  than can be formed with those digits.", "longDescription" : "Write a function that takes a number with distinct digits and returns a sorted array of all the numbers than can be formed with those digits.\n\nFor example: digitCombos(123) returns [123, 132, 213, 231, 312, 321]\ndigitCombos(12) should return [12,21]", "difficulty" : "Hard", "testCode" : "describe(\"Digit Combinations\", function() {\n  it(\"returns the single combination of a 1 digit number\", function() {\n    return expect(digitCombos(5)).to.eql([5]);\n  });\n  it(\"returns the sorted combinations of a 2 digit number\", function() {\n    return expect(digitCombos(12)).to.eql([12, 21]);\n  });\n  it(\"returns the combinations of a 3 digit number\", function() {\n    return expect(digitCombos(123)).to.eql([123, 132, 213, 231, 312, 321]);\n  });\n  it(\"returns the combinations of a 4 digit number\", function() {\n    return expect(digitCombos(1234)).to.eql([1234, 1243, 1324, 1342, 1423, 1432, 2134, 2143, 2314, 2341, 2413, 2431, 3124, 3142, 3214, 3241, 3412, 3421, 4123, 4132, 4213, 4231, 4312, 4321]);\n  });\n  return it(\"returns the combinations of a 5+ digit number\", function() {\n    expect(digitCombos(12345)).to.have.length(120);\n    expect(digitCombos(123456)).to.have.length(720);\n    return expect(digitCombos(1234567)).to.have.length(5040);\n  });\n});", "editorPrompt" : "function digitCombos(number) {\n    //should return an aray of all the numbers that can be formed with     //the digits in the number\n}", "category" : [ "Arrays", "Combinations" ], "__v" : 0 }
{ "_id" : { "$oid" : "551ad5004ee8ddb95c35e4fa" }, "name" : "Rectangle Intersection", "shortDescription" : "Write a function that returns the intersection of two rectangles.", "longDescription" : "Rectangles are represented as an array of two Cartesian coordinates. The first coordinate represents the bottom-left of the rectangle and the second coordinate represents the top-right of the rectangle. As an example, for an input of [[0, 0], [2, 1]] and [[1, 0], [3, 1]] the returned rectangle should be [[1, 0], [2, 1]].", "difficulty" : "Hard", "testCode" : "describe(\"Rectangle Intersection\", function() {\n  it(\"handles a simple case\", function() {\n    return expect(recInt([[0, 0], [2, 1]], [[1, 0], [3, 1]])).to.eql([[1, 0], [2, 1]]);\n  });\n  it(\"returns the smaller rectangle if engulfed completely\", function() {\n    return expect(recInt([[1, 1], [2, 2]], [[0, 0], [5, 5]])).to.eql([[1, 1], [2, 2]]);\n  });\n  it(\"returns null if there is no intersection\", function() {\n    return expect(recInt([[1, 1], [2, 2]], [[4, 4], [5, 5]])).to.be[\"null\"];\n  });\n  return it(\"handles a more complex case\", function() {\n    return expect(recInt([[1, 1], [5, 4]], [[2, 2], [3, 5]])).to.eql([[2, 2], [3, 4]]);\n  });\n});", "editorPrompt" : "var recInt = function (rec1, rec2){\n// Should return an array representing the intersection\n};", "time" : { "$date" : "2015-03-31T13:10:24.081-0400" }, "category" : [ "Math", "Geometry" ], "__v" : 0 }
{ "_id" : { "$oid" : "551ae938804833ec6f996cc7" }, "name" : "Unique", "shortDescription" : "Sort an array", "longDescription" : "Write a function that takes an array of numbers and returns a new sorted array containing all of the unique elements of the original array.", "difficulty" : "Easy", "testCode" : "describe(\"Unique\", function (){\n\tit(\"returns a new sorted array\", function () {\n\t\treturn expect(unique([0, 1, 1, 1, 2, 2, 3, 5, 6, 6, 10])).to.eql([0, 1, 2, 3, 5, 6, 10]);\n\t});\n\tit(\"returns a new sorted array of unique elements\", function() {\n\t  return expect(unique([4, 4, 2, 7, 2, 5])).to.eql([2, 4, 5, 7]);\n\t});\n});", "editorPrompt" : "var unique = function (array){\n// should retrun a sorted array of unique numbers\n};", "time" : { "$date" : "2015-03-31T14:36:40.625-0400" }, "category" : [ "Arrays" ], "__v" : 0 }
{ "_id" : { "$oid" : "551af0a2c9564dd67617c210" }, "name" : "Stock Picker", "shortDescription" : "Find the maximum profit from an array of stock prices", "longDescription" : "Given an array of stock prices, where each array index corresponds to a different time of day (in chronological order), determine the maximum profit that can be earned from buying at a particular time (index) and selling at some later time (index). \n\nFor example, an input of [37,24,18,30,36,15,17,35] would return 20. You would buy at 15 and sell at 35.", "difficulty" : "Medium", "testCode" : "describe(\"Stock Picker\", function (){\n  it(\"returns the maximum profit\", function (){\n    return expect(stockPicker([1,2,8,0,3,6])).to.equal(7);\n  });\n  return it(\"accounts for the order of the prices\", function (){\n    return expect(stockPicker([3,2,4,6,0,1,2,5])).to.equal(5);\n  });\n}); ", "editorPrompt" : "var stockPicker = function (stockArray){\n  // should return a number representing the maximum profit\n};", "time" : { "$date" : "2015-03-31T15:08:18.909-0400" }, "category" : [ "Arrays" ], "__v" : 0 }
{ "_id" : { "$oid" : "551af9bc7850394380d70c3f" }, "longDescription" : "You are given an array of positive integers, where each element represents the unit height of a barrier. Assume the width of each barrier is one unit and that the barriers are arranged in the order of the given array. If it begins to rain, how much water can be held by the given arrangement of barriers. A height and width of 1 represents 1 unit volume.\n\nSee example in prompt.", "name" : "Water Volume", "shortDescription" : "Determines how much water an array can hold", "difficulty" : "Hard", "testCode" : "describe(\"Water Volume\", function (){\n  it(\"returns the total volume for a simple arrangement\", function (){\n    return expect(waterVolume([1,0,2])).to.equal(1);\n  });\n  it(\"returns the total volume for a complicated arrangement\", function (){\n    return expect(waterVolume([0,1,0,4,3,0,4,0,0,1])).to.equal(8);\n  });\n});", "editorPrompt" : "var waterVolume = function (barrierArray) {\n  // should return a number representing the volume that can be held\n  //\n  // The input below:\n  //             __\n  //    __      |  |\n  //   |  |   __|  |   __\n  // __|  |__|  |  |__|  |__ corresponds to [0,2,0,1,3,0,1,0] and would return 4.\n}; ", "time" : { "$date" : "2015-03-31T15:47:08.090-0400" }, "category" : [ "Math" ], "__v" : 0 }
{ "_id" : { "$oid" : "551d793797095aaaa17f6799" }, "testCode" : "describe(\"Character Frequency\", function () {\n  it(\"returns an empty object if the string is empty\", function () {\n    return expect(charFreq(\"\")).to.equal({});\n  });\n  it(\"returns an object with the correct count for each character\", function () {\n    return expect(charFreq(\"abnana\")).to.equal({a:3,b:1,n:2});\n  });\n});", "editorPrompt" : "var charFreq = function (string){\n  // should return an object representing the frequency of each character\n}", "name" : "Character Frequency", "shortDescription" : "Creates frequency list from a string", "longDescription" : "Write a function that takes a string and builds an frequency list of the characters contained in it. Represent the frequency list as an object. The list can occur in the order the characters are received from the string.", "difficulty" : "Easy", "time" : { "$date" : "2015-04-02T13:15:35.818-0400" }, "category" : [ "Strings", "Objects" ], "__v" : 0 }
